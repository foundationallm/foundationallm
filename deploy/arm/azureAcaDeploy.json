{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "5692427675602515188"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus",
      "metadata": {
        "description": "Location where all resources will be deployed. This value defaults to the **East US** region."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[concat('fllm', uniqueString(resourceGroup().id))]",
      "maxLength": 15,
      "metadata": {
        "description": "Unique name for the deployed services below. Max length 15 characters, alphanumeric, must begin with an alpha:\r\n- Azure Cosmos DB for NoSQL\r\n- Azure Cosmos DB for MongoDB vCore\r\n- Azure OpenAI\r\n- Azure App Service\r\n- Azure Functions\r\n\r\nThe name defaults to a unique string generated from the resource group identifier.\r\n"
      }
    },
    "openAiEndpoint": {
      "type": "string",
      "metadata": {
        "description": "The OpenAI Endpoint"
      }
    },
    "openAiKey": {
      "type": "string",
      "metadata": {
        "description": "The OpenAI API key"
      }
    },
    "openAiCompletionsDeployment": {
      "type": "string",
      "metadata": {
        "description": "The OpenAI Completions Deployment"
      }
    },
    "openAiEmbeddingsDeployment": {
      "type": "string",
      "metadata": {
        "description": "The OpenAI Embeddings Deployment"
      }
    }
  },
  "variables": {
    "appConfigSettings": {
      "name": "[format('{0}-appconfig', parameters('name'))]",
      "apiUrlConfigKeys": [
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:APIUrl",
          "value": "agentfactory",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:AgentHubAPI:APIUrl",
          "value": "agenthub",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:CoreAPI:APIUrl",
          "value": "core",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:ManagementAPI:APIUrl",
          "value": "management",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:DataSourceHubAPI:APIUrl",
          "value": "datasourcehub",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:GatekeeperAPI:APIUrl",
          "value": "gatekeeper",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:LangChainAPI:APIUrl",
          "value": "langchain",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:PromptHubAPI:APIUrl",
          "value": "prompthub",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:SemanticKernelAPI:APIUrl",
          "value": "semantickernel",
          "contentType": null
        }
      ],
      "configKeys": [
        {
          "key": "FoundationaLLM:AgentHub:AgentMetadata:StorageContainer",
          "value": "agents",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AgentHub:StorageManager:BlobStorage:ConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-agenthub-storagemanager-blobstorage-connectionstring\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-agentfactoryapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:AgentFactoryAPI:ForceHttpsRedirection",
          "value": "false",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:AgentHubAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-agenthubapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:AgentHubAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:CoreAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:ManagementAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:DataSourceHubAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-datasourcehubapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:DataSourceHubAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:GatekeeperAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-gatekeeperapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:GatekeeperAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:GatekeeperAPI:ForceHttpsRedirection",
          "value": "false",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:APIs:LangChainAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-langchainapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:LangChainAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:PromptHubAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-prompthubapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:PromptHubAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:SemanticKernelAPI:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-apis-semantickernelapi-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:SemanticKernelAPI:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:APIs:SemanticKernelAPI:ForceHttpsRedirection",
          "value": "false",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:APIKey",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-azurecontentsafety-apikey\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:APIUrl",
          "value": "[concat('https://', variables('safetySettings').name, '.cognitiveservices.azure.com/')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:HateSeverity",
          "value": "2",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:SelfHarmSeverity",
          "value": "2",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:SexualSeverity",
          "value": "2",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureContentSafety:ViolenceSeverity",
          "value": "2",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Completions:DeploymentName",
          "value": "completions",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Completions:MaxTokens",
          "value": "8096",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Completions:ModelName",
          "value": "gpt-35-turbo",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Completions:ModelVersion",
          "value": "0301",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Completions:Temperature",
          "value": "0",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Embeddings:DeploymentName",
          "value": "embeddings",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Embeddings:MaxTokens",
          "value": "8191",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Embeddings:ModelName",
          "value": "text-embedding-ada-002",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Embeddings:Temperature",
          "value": "0",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Endpoint",
          "value": "[parameters('openAiEndpoint')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Key",
          "value": "[concat('{\"uri\":\"https://', variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-azureopenai-api-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:AzureOpenAI:API:Version",
          "value": "2023-05-15",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:BlobStorageMemorySource:BlobStorageConnection",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-blobstoragememorysource-blobstorageconnection\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:BlobStorageMemorySource:BlobStorageContainer",
          "value": "memory-source",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:BlobStorageMemorySource:ConfigFilePath",
          "value": "BlobMemorySourceConfig.json",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:AccentColor",
          "value": "#fff",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:AllowAgentSelection",
          "value": "default, anomaly, hai, movies, sdzwa, weather, weather-sec",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:BackgroundColor",
          "value": "#fff",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:CompanyName",
          "value": "FoundationaLLM",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:FavIconUrl",
          "value": "favicon.ico",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:KioskMode",
          "value": "false",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:LogoText",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:LogoUrl",
          "value": "foundationallm-logo-white.svg",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:PageTitle",
          "value": "FoundationaLLM Chat Copilot",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:PrimaryColor",
          "value": "#131833",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:PrimaryTextColor",
          "value": "#fff",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:SecondaryColor",
          "value": "#334581",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Branding:SecondaryTextColor",
          "value": "#fff",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Chat:Entra:CallbackPath",
          "value": "/signin-oidc",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Chat:Entra:ClientId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Chat:Entra:ClientSecret",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-chat-entra-clientsecret\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:Chat:Entra:Instance",
          "value": "https://login.microsoftonline.com/",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Chat:Entra:Scopes",
          "value": "api://FoundationaLLM-Auth/Data.Read",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Chat:Entra:TenantId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Management:Entra:CallbackPath",
          "value": "/signin-oidc",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Management:Entra:ClientId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Management:Entra:ClientSecret",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-management-entra-clientsecret\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:Management:Entra:Instance",
          "value": "https://login.microsoftonline.com/",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Management:Entra:Scopes",
          "value": "api://FoundationaLLM-Auth/Data.Read",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Management:Entra:TenantId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearch:EndPoint",
          "value": "[concat('https://', variables('cognitiveSearchSettings').name, '.search.windows.net')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearch:IndexName",
          "value": "vector-index",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearch:Key",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-cognitivesearch-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CognitiveSearch:MaxVectorSearchResults",
          "value": "10",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:BlobStorageConnection",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-cognitivesearchmemorysource-blobstorageconnection\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:BlobStorageContainer",
          "value": "memory-source",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:ConfigFilePath",
          "value": "ACSMemorySourceConfig.json",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:EndPoint",
          "value": "[concat('https://', variables('cognitiveSearchSettings').name, '.search.windows.net')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:IndexName",
          "value": "vector-index",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CognitiveSearchMemorySource:Key",
          "value": "[concat('{\"uri\":\"https://', variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-cognitivesearchmemorysource-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:CallbackPath",
          "value": "/signin-oidc",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:ClientId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:ClientSecret",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-coreapi-entra-clientsecret\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:Instance",
          "value": "https://login.microsoftonline.com/",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:Scopes",
          "value": "Data.Read",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CoreAPI:Entra:TenantId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:CallbackPath",
          "value": "/signin-oidc",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:ClientId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:ClientSecret",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-managementapi-entra-clientsecret\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:Instance",
          "value": "https://login.microsoftonline.com/",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:Scopes",
          "value": "Data.Read",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:ManagementAPI:Entra:TenantId",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CoreWorker:AppInsightsConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-app-insights-connection-string\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CosmosDB:ChangeFeedLeaseContainer",
          "value": "leases",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CosmosDB:Containers",
          "value": "Sessions, UserSessions, UserProfiles",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CosmosDB:Database",
          "value": "database",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CosmosDB:Endpoint",
          "value": "[concat('https://', variables('cosmosDbSettings').name, '.documents.azure.com:443/')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:CosmosDB:Key",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-cosmosdb-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:CosmosDB:MonitoredContainers",
          "value": "Sessions",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:DataSourceHub:DataSourceMetadata:StorageContainer",
          "value": "data-sources",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:DataSourceHub:StorageManager:BlobStorage:ConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-datasourcehub-storagemanager-blobstorage-connectionstring\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:DataSources:AboutFoundationaLLM:BlobStorage:ConnectionString",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-blobstoragememorysource-blobstorageconnection\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:DurableSystemPrompt:BlobStorageConnection",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-durablesystemprompt-blobstorageconnection\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:DurableSystemPrompt:BlobStorageContainer",
          "value": "prompts",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:LangChain:CSVFile:URL",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-langchain-csvfile-url\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:LangChain:SQLDatabase:TestDB:Password",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-langchain-sqldatabase-testdb-password\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:LangChain:Summary:MaxTokens",
          "value": "4097",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:LangChain:Summary:ModelName",
          "value": "gpt-35-turbo",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:LangChainAPI:Key",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-langchainapi-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:OpenAI:API:Endpoint",
          "value": "[parameters('openAiEndpoint')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:OpenAI:API:Key",
          "value": "[concat('{\"uri\":\"https://',variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-openai-api-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:OpenAI:API:Temperature",
          "value": "0",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:PromptHub:PromptMetadata:StorageContainer",
          "value": "prompts",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:PromptHub:StorageManager:BlobStorage:ConnectionString",
          "value": "[concat('{\"uri\":\"https://', variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-prompthub-storagemanager-blobstorage-connectionstring\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:Refinement",
          "value": "",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI:Key",
          "value": "[concat('{\"uri\":\"https://', variables('keyVaultSettings').name, '.vault.azure.net/secrets/foundationallm-azureopenai-api-key\"}')]",
          "contentType": "application/vnd.microsoft.appconfig.keyvaultref+json;charset=utf-8"
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.ChatCompletionPromptName",
          "value": "RetailAssistant.Default",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.CompletionsDeployment",
          "value": "completions",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.CompletionsDeploymentMaxTokens",
          "value": "8096",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.EmbeddingsDeployment",
          "value": "embeddings",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.EmbeddingsDeploymentMaxTokens",
          "value": "8191",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.Endpoint",
          "value": "[parameters('openAiEndpoint')]",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.CompletionsMaxTokens",
          "value": "300",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.CompletionsMinTokens",
          "value": "50",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.MemoryMaxTokens",
          "value": "3000",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.MemoryMinTokens",
          "value": "1500",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.MessagesMaxTokens",
          "value": "3000",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.MessagesMinTokens",
          "value": "100",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.PromptOptimization.SystemMaxTokens",
          "value": "1500",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:SemanticKernelAPI:OpenAI.ShortSummaryPromptName",
          "value": "Summarizer.TwoWords",
          "contentType": null
        },
        {
          "key": "FoundationaLLM:Vectorization:WorkerSettings",
          "value": "{\n\t\"RequestManagers\": [\n\t\t{\n\t\t\t\"RequestSourceName\": \"extract\",\n\t\t\t\"MaxHandlerInstances\": 1\n\t\t},\n\t\t{\n\t\t\t\"RequestSourceName\": \"partition\",\n\t\t\t\"MaxHandlerInstances\": 1\n\t\t},\n\t\t{\n\t\t\t\"RequestSourceName\": \"embed\",\n\t\t\t\"MaxHandlerInstances\": 1\n\t\t},\n\t\t{\n\t\t\t\"RequestSourceName\": \"index\",\n\t\t\t\"MaxHandlerInstances\": 1\n\t\t}\n\t],\n\t\"QueuingEngine\": \"None\"\n}",
          "contentType": "application/json"
        }
      ], 
      "featureFlags": [
        {
          "key": "FoundationaLLM-AllowAgentHint",
          "label": "",
          "value": {
            "id": "FoundationaLLM-AllowAgentHint",
            "description": "",
            "enabled": false,
            "conditions": {
              "client_filters": []
            }
          }
        }
      ]
    },
    "cognitiveSearchSettings": {
      "name": "[format('{0}-cog-search', parameters('name'))]",
      "sku": "basic",
      "partionCount": 1,
      "replicaCount": 1,
      "hostingMode": "default"
    },
    "cosmosContainers": {
      "userSessionsContainer": {
        "name": "UserSessions",
        "partitionKeyPath": "/upn",
        "maxThroughput": 1000
      },
      "userProfilesContainer": {
        "name": "UserProfiles",
        "partitionKeyPath": "/upn",
        "maxThroughput": 1000
      },
      "sessionsContainer": {
        "name": "Sessions",
        "partitionKeyPath": "/sessionId",
        "maxThroughput": 1000
      },
      "leasesContainer": {
        "name": "leases",
        "partitionKeyPath": "/id",
        "maxThroughput": 1000
      }
    },
    "cosmosDbSettings": {
      "name": "[format('{0}-cosmos-nosql', parameters('name'))]",
      "databaseName": "database"
    },
    "dotnetAcaSettings": {
      "name": "[parameters('name')]",
      "instances": [
        {
          "key": "agentfactory",
          "image": "ghcr.io/solliancenet/foundationallm/agent-factory-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "core",
          "image": "ghcr.io/solliancenet/foundationallm/core-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "management",
          "image": "ghcr.io/solliancenet/foundationallm/management-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "gatekeeper",
          "image": "ghcr.io/solliancenet/foundationallm/gatekeeper-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "semantickernel",
          "image": "ghcr.io/solliancenet/foundationallm/semantic-kernel-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "vectorization",
          "image": "ghcr.io/solliancenet/foundationallm/vectorization-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        }
      ]
    },
    "dotnetWorkerAcaSettings": {
      "name": "[parameters('name')]",
      "instances": [
        {
          "key": "corejob",
          "image": "ghcr.io/solliancenet/foundationallm/core-job",
          "tag": "0.1",
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "vectorizationjob",
          "image": "ghcr.io/solliancenet/foundationallm/vectorization-job",
          "tag": "0.1",
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        }
      ]
    },
    "keyVaultSettings": {
      "name": "[format('{0}-kv', parameters('name'))]"
    },
    "nodejsAcaSettings": {
      "name": "[parameters('name')]",
      "instances": [
        {
          "key": "chatui",
          "image": "ghcr.io/solliancenet/foundationallm/chat-ui",
          "tag": "0.1",
          "containerPort": 3000,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "managementui",
          "image": "ghcr.io/solliancenet/foundationallm/management-ui",
          "tag": "0.1",
          "containerPort": 3000,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        }
      ]
    },
    "pythonAcaSettings": {
      "name": "[parameters('name')]",
      "instances": [
        {
          "key": "agenthub",
          "image": "ghcr.io/solliancenet/foundationallm/agent-hub-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "datasourcehub",
          "image": "ghcr.io/solliancenet/foundationallm/data-source-hub-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "gatekeeperint",
          "image": "ghcr.io/solliancenet/foundationallm/gatekeeper-integration-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        },
        {
          "key": "langchain",
          "image": "ghcr.io/solliancenet/foundationallm/langchain-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 10,
          "resources": {
            "cpu": 0.5,
            "memory": "2Gi"
          }
        },
        {
          "key": "prompthub",
          "image": "ghcr.io/solliancenet/foundationallm/prompt-hub-api",
          "tag": "0.1",
          "containerPort": 80,
          "replicas": 1,
          "resources": {
            "cpu": 0.25,
            "memory": "0.25Gi"
          }
        }
      ]
    },
    "safetySettings": {
      "name": "[format('{0}-contentsafety', parameters('name'))]"
    },
    "vnetSettings": {
      "name": "[format('{0}-vnet', parameters('name'))]",
      "addressPrefix": "10.244.0.0/16",
      "subnets": {
        "aca-subnet": {
          "addressPrefix": "10.244.0.0/16"
        }
      }
    },
    "laSettings": {
      "name": "[format('{0}-la', parameters('name'))]"
    },
    "aiSettings": {
      "name": "[format('{0}-ai', parameters('name'))]"
    },
    "roleIdMapping": {
      "Key Vault Administrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
      "Key Vault Certificates Officer": "a4417e6f-fecd-4de8-b567-7b0420556985",
      "Key Vault Crypto Officer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
      "Key Vault Crypto Service Encryption User": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
      "Key Vault Crypto User": "12338af0-0e69-4776-bea7-57ae8d297424",
      "Key Vault Reader": "21090545-7ca7-4776-b22c-e363652d74d2",
      "Key Vault Secrets Officer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
      "Key Vault Secrets User": "4633458b-17de-408a-b874-0445c86b69e6",
      "App Configuration Data Reader": "516239f1-63e1-4d78-a4de-a74fb236a071"
    }
  },
  "resources": [
        {
        "type": "Microsoft.CognitiveServices/accounts",
        "apiVersion": "2023-05-01",
        "name": "[variables('safetySettings').name]",
        "location": "[parameters('location')]",
        "sku": {
            "name": "S0"
        },
        "kind": "ContentSafety",
        "identity": {
            "type": "SystemAssigned"
        },
        "properties": {
            "customSubDomainName": "[variables('safetySettings').name]",
            "networkAcls": {
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": []
            },
            "publicNetworkAccess": "Enabled"
        }
    },
    {
      "type": "Microsoft.AppConfiguration/configurationStores",
      "apiVersion": "2023-03-01",
      "name": "[variables('appConfigSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "standard"
      },
      "properties": {
        "encryption": {},
        "disableLocalAuth": false,
        "softDeleteRetentionInDays": 7,
        "enablePurgeProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]"
      ]
    },
    {
      "copy": {
        "name": "configStoreKeyValue",
        "count": "[length(variables('appConfigSettings').configKeys)]"
      },
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/{1}', variables('appConfigSettings').name, variables('appConfigSettings').configKeys[copyIndex()].key)]",
      "properties": {
        "value": "[variables('appConfigSettings').configKeys[copyIndex()].value]",
        "contentType": "[variables('appConfigSettings').configKeys[copyIndex()].contentType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ]
    },
    {
      "copy": {
        "name": "apiUrlConfigKeyValue",
        "count": "[length(variables('appConfigSettings').apiUrlConfigKeys)]"
      },
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/{1}', variables('appConfigSettings').name, variables('appConfigSettings').apiUrlConfigKeys[copyIndex()].key)]",
      "properties": {
        "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', format('{0}{1}ca', parameters('name'), variables('appConfigSettings').apiUrlConfigKeys[copyIndex()].value)), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn)]",
        "contentType": "[variables('appConfigSettings').apiUrlConfigKeys[copyIndex()].contentType]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ]
    },
    {
      "copy": {
        "name": "featureFlagsKeyValue",
        "count": "[length(variables('appConfigSettings').featureFlags)]"
      },
      "type": "Microsoft.AppConfiguration/configurationStores/keyValues",
      "apiVersion": "2021-10-01-preview",
      "name": "[format('{0}/{1}', variables('appConfigSettings').name, format('.appconfig.featureflag~2F{0}${1}', variables('appConfigSettings').featureFlags[copyIndex()].key, variables('appConfigSettings').featureFlags[copyIndex()].label))]",
      "properties": {
        "value": "[string(variables('appConfigSettings').featureFlags[copyIndex()].value)]",
        "contentType": "application/vnd.microsoft.appconfig.ff+json;charset=utf-8"
      },
      "dependsOn": [
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[variables('keyVaultSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "createMode": "default",
        "enabledForDeployment": true,
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[tenant().tenantId]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-app-insights-connection-string')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[reference(resourceId('Microsoft.Insights/components', variables('aiSettings').name), '2015-05-01').ConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-agentfactoryapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'agent-factory')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-agenthubapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'agent-hub')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-datasourcehubapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'data-source-hub')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-gatekeeperapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'gatekeeper')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-langchainapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'langchain')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-prompthubapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'prompt-hub')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-apis-semantickernelapi-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'semantic-kernel')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-agenthub-storagemanager-blobstorage-connectionstring')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-azurecontentsafety-apikey')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" , "[resourceId('Microsoft.CognitiveServices/accounts', variables('safetySettings').name)]"],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts', variables('safetySettings').name), '2023-05-01').key1]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-azureopenai-api-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[parameters('openAiKey')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-blobstoragememorysource-blobstorageconnection')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-chat-entra-clientsecret')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-cognitivesearch-configblobstorageconnection')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-cognitivesearch-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Search/searchServices', variables('cognitiveSearchSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('cognitiveSearchSettings').name), '2015-08-19').PrimaryKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-cognitivesearchmemorysource-blobstorageconnection')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-cognitivesearchmemorysource-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Search/searchServices', variables('cognitiveSearchSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices', variables('cognitiveSearchSettings').name), '2015-08-19').PrimaryKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-coreapi-entra-clientsecret')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-managementapi-entra-clientsecret')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-management-entra-clientsecret')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-cosmosdb-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbSettings').name), '2019-12-12').primaryMasterKey]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-datasourcehub-storagemanager-blobstorage-connectionstring')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-durablesystemprompt-blobstorageconnection')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-langchain-csvfile-url')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-langchain-sqldatabase-testdb-password')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": ""
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-langchainapi-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[uniqueString(resourceGroup().id, 'langchain')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-openai-api-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[parameters('openAiKey')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-prompthub-storagemanager-blobstorage-connectionstring')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]", "[resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name')))]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', format('{0}sa', parameters('name')), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}sa', parameters('name'))), '2018-07-01').keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-02-01",
      "name": "[concat(variables('keyVaultSettings').name, '/foundationallm-semantickernelapi-openai-key')]",
      "location": "[parameters('location')]",
      "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultSettings').name)]" ],
      "properties": {
        "attributes": { "enabled": true },
        "value": "[parameters('openAiKey')]"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-08-15",
      "name": "[variables('cosmosDbSettings').name]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "consistencyPolicy": {
          "defaultConsistencyLevel": "Session"
        },
        "databaseAccountOfferType": "Standard",
        "locations": [
          {
            "failoverPriority": 0,
            "isZoneRedundant": false,
            "locationName": "[parameters('location')]"
          }
        ]
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName)]",
      "properties": {
        "resource": {
          "id": "[variables('cosmosDbSettings').databaseName]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosDbSettings').name)]"
      ]
    },
    {
      "copy": {
        "name": "cosmosContainer",
        "count": "[length(items(variables('cosmosContainers')))]"
      },
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}/{2}', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName, items(variables('cosmosContainers'))[copyIndex()].value.name)]",
      "properties": {
        "resource": {
          "id": "[items(variables('cosmosContainers'))[copyIndex()].value.name]",
          "partitionKey": {
            "paths": [
              "[items(variables('cosmosContainers'))[copyIndex()].value.partitionKeyPath]"
            ],
            "kind": "Hash",
            "version": 2
          }
        },
        "options": {
          "autoscaleSettings": {
            "maxThroughput": "[items(variables('cosmosContainers'))[copyIndex()].value.maxThroughput]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosDbSettings').name, variables('cosmosDbSettings').databaseName)]"
      ]
    },
    {
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2022-09-01",
      "name": "[variables('cognitiveSearchSettings').name]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('cognitiveSearchSettings').sku]"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default",
        "publicNetworkAccess": "Enabled",
        "networkRuleSet": {
          "ipRules": []
        },
        "encryptionWithCmk": {
          "enforcement": "Unspecified"
        },
        "disableLocalAuth": false,
        "authOptions": {
          "apiKeyOnly": {}
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-12-01-preview",
      "name": "[variables('laSettings').name]",
      "location": "eastus",
      "properties": {
        "sku": {
          "name": "Standalone"
        },
        "retentionInDays": 31,
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        },
        "workspaceCapping": {
          "dailyQuotaGb": -1
        },
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('aiSettings').name]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "Flow_Type": "Bluefield",
        "Request_Source": "rest",
        "RetentionInDays": 30,
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]",
        "IngestionMode": "LogAnalytics",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[format('{0}sa', parameters('name'))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "properties": {
        "isHnsEnabled": true,
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-09-01",
      "name": "[variables('vnetSettings').name]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetSettings').addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "aca-subnet",
            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aca-subnet')]",
            "properties": {
              "addressPrefix": "[variables('vnetSettings').subnets['aca-subnet'].addressPrefix]",
              "delegations": [
                {
                  "name": "Microsoft.App.environments",
                  "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aca-subnet'), '/delegations/Microsoft.App.environments')]",
                  "properties": {
                    "serviceName": "Microsoft.App/environments"
                  },
                  "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                }
              ],
              "privateEndpointNetworkPolicies": "Disabled",
              "privateLinkServiceNetworkPolicies": "Enabled"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets"
          }
        ],
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "apiVersion": "2022-09-01",
      "name": "[concat(variables('vnetSettings').name, '/aca-subnet')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetSettings').name)]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vnetSettings').name, '-aca-subnet-nsg'))]"
      ],
      "properties": {
        "addressPrefix": "[variables('vnetSettings').subnets['aca-subnet'].addressPrefix]",
        "delegations": [
          {
            "name": "Microsoft.App.environments",
            "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aca-subnet'), '/delegations/Microsoft.App.environments')]",
            "properties": {
              "serviceName": "Microsoft.App/environments"
            },
            "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
          }
        ],
        "privateEndpointNetworkPolicies": "Disabled",
        "privateLinkServiceNetworkPolicies": "Enabled",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(variables('vnetSettings').name, '-aca-subnet-nsg'))]",
          "name": "[concat(variables('vnetSettings').name, '-aca-subnet-nsg')]",
          "properties": {
            "flushConnection": false,
            "securityRules": [
              {
                "name": "AllowHTTPInbound",
                "properties": {
                  "access": "Allow",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "80",
                  "direction": "Inbound",
                  "priority": 500,
                  "protocol": "Tcp",
                  "sourceAddressPrefix": "Internet",
                  "sourcePortRange": "*"
                },
                "type": "Microsoft.Network/networkSecurityGroups/securityRules"
              },
              {
                "name": "AllowHTTPSInbound",
                "properties": {
                  "access": "Allow",
                  "destinationAddressPrefix": "*",
                  "destinationPortRange": "443",
                  "direction": "Inbound",
                  "priority": 501,
                  "protocol": "Tcp",
                  "sourceAddressPrefix": "Internet",
                  "sourcePortRange": "*"
                },
                "type": "Microsoft.Network/networkSecurityGroups/securityRules"
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2023-04-01",
      "name": "[concat(variables('vnetSettings').name, '-aca-subnet-nsg')]",
      "location": "[parameters('location')]",
      "properties": {
        "flushConnection": false,
        "securityRules": [
          {
            "name": "AllowHTTPInbound",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "80",
              "direction": "Inbound",
              "priority": 500,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            },
            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
          },
          {
            "name": "AllowHTTPSInbound",
            "properties": {
              "access": "Allow",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443",
              "direction": "Inbound",
              "priority": 501,
              "protocol": "Tcp",
              "sourceAddressPrefix": "Internet",
              "sourcePortRange": "*"
            },
            "type": "Microsoft.Network/networkSecurityGroups/securityRules"
          }
        ]
      }
    },
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}acaenv', parameters('name'))]",
      "location": "[parameters('location')]",
      "properties": {
        "vnetConfiguration": {
          "internal": false,
          "infrastructureSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetSettings').name, 'aca-subnet')]"
        },
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name), '2021-12-01-preview').customerId]",
            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', variables('laSettings').name), providers('Microsoft.OperationalInsights', 'workspaces').apiVersions[0]).primarySharedKey]"
          }
        },
        "zoneRedundant": false,
        "workloadProfiles": [
          {
            "workloadProfileType": "Consumption",
            "name": "Consumption"
          },
          {
            "workloadProfileType": "D4",
            "name": "Warm",
            "minimumCount": 1,
            "maximumCount": 10
          }
        ],
        "infrastructureResourceGroup": "[concat('ME_', resourceGroup().name)]",
        "peerAuthentication": {
          "mtls": {
            "enabled": false
          }
        }
      }
    },
    {
      "copy": {
        "name": "dotnetAcaInstances",
        "count": "[length(variables('dotnetAcaSettings').instances)]"
      },
      "type": "Microsoft.App/containerapps",
      "apiVersion": "2023-05-02-preview",
      "name": "[format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "workloadProfileName": "Warm",
        "configuration": {
          "secrets": [],
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": "[variables('dotnetAcaSettings').instances[copyIndex()].containerPort]",
            "exposedPort": 0,
            "stickySessions": {
              "affinity": "sticky"
            },
            "transport": "Auto",
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ],
            "allowInsecure": false,
            "corsPolicy": {
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ],
              "maxAge": 0,
              "allowCredentials": true
            },
            "clientCertificateMode": "Ignore"
          }
        },
        "template": {
          "containers": [
            {
              "image": "[format('{0}:{1}', variables('dotnetAcaSettings').instances[copyIndex()].image, variables('dotnetAcaSettings').instances[copyIndex()].tag)]",
              "name": "[format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)]",
              "env": [
                {
                  "name": "FoundationaLLM__AppConfig__ConnectionString",
                  "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores',variables('appConfigSettings').name), '2023-03-01').value[2].connectionString]"
                }
              ],
              "resources": {
                "cpu": "[variables('dotnetAcaSettings').instances[copyIndex()].resources.cpu]",
                "memory": "[variables('dotnetAcaSettings').instances[copyIndex()].resources.memory]"
              },
              "probes": [],
              "volumeMounts": []
            }
          ],
          "scale": {
            "minReplicas": "[variables('dotnetAcaSettings').instances[copyIndex()].replicas]",
            "maxReplicas": "[variables('dotnetAcaSettings').instances[copyIndex()].replicas]"
          },
          "volumes": []
        }
      }
    },
    {
      "copy": {
        "name": "dotnetAcaSaiAppConfigRoles",
        "count": "[length(variables('dotnetAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)), 'appConfig')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "dotnetAcaSaiKeyVaultRoles",
        "count": "[length(variables('dotnetAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)), 'keyVault')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['Key Vault Secrets User'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetAcaSettings').name, variables('dotnetAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "dotnetWorkerAcaInstances",
        "count": "[length(variables('dotnetWorkerAcaSettings').instances)]"
      },
      "type": "Microsoft.App/containerapps",
      "apiVersion": "2023-05-02-preview",
      "name": "[format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "workloadProfileName": "Warm",
        "configuration": {
          "secrets": [],
          "activeRevisionsMode": "Single"
        },
        "template": {
          "containers": [
            {
              "image": "[format('{0}:{1}', variables('dotnetWorkerAcaSettings').instances[copyIndex()].image, variables('dotnetWorkerAcaSettings').instances[copyIndex()].tag)]",
              "name": "[format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)]",
              "env": [
                {
                  "name": "FoundationaLLM__AppConfig__ConnectionString",
                  "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores',variables('appConfigSettings').name), '2023-03-01').value[2].connectionString]"
                }
              ],
              "resources": {
                "cpu": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].resources.cpu]",
                "memory": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].resources.memory]"
              },
              "probes": [],
              "volumeMounts": []
            }
          ],
          "scale": {
            "minReplicas": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].replicas]",
            "maxReplicas": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].replicas]"
          },
          "volumes": []
        }
      }
    },
    {
      "copy": {
        "name": "dotnetWorkerAcaSaiAppConfigRoles",
        "count": "[length(variables('dotnetWorkerAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)), 'appConfig')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "dotnetWorkerAcaSaiKeyVaultRoles",
        "count": "[length(variables('dotnetWorkerAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)), 'keyVault')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['Key Vault Secrets User'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('dotnetWorkerAcaSettings').name, variables('dotnetWorkerAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "nodejsAcaInstances",
        "count": "[length(variables('nodejsAcaSettings').instances)]"
      },
      "type": "Microsoft.App/containerapps",
      "apiVersion": "2023-05-02-preview",
      "name": "[format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "workloadProfileName": "Warm",
        "configuration": {
          "secrets": [],
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": "[variables('nodejsAcaSettings').instances[copyIndex()].containerPort]",
            "exposedPort": 0,
            "stickySessions": {
              "affinity": "sticky"
            },
            "transport": "Auto",
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ],
            "allowInsecure": false,
            "corsPolicy": {
              "allowedOrigins": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ],
              "maxAge": 0,
              "allowCredentials": true
            },
            "clientCertificateMode": "Ignore"
          }
        },
        "template": {
          "containers": [
            {
              "image": "[format('{0}:{1}', variables('nodejsAcaSettings').instances[copyIndex()].image, variables('nodejsAcaSettings').instances[copyIndex()].tag)]",
              "name": "[format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)]",
              "env": [
                {
                  "name": "NUXT_APP_CONFIG_ENDPOINT",
                  "value": "[listKeys(resourceId('Microsoft.AppConfiguration/configurationStores',variables('appConfigSettings').name), '2023-03-01').value[2].connectionString]"
                }
              ],
              "resources": {
                "cpu": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].resources.cpu]",
                "memory": "[variables('dotnetWorkerAcaSettings').instances[copyIndex()].resources.memory]"
              },
              "probes": [],
              "volumeMounts": []
            }
          ],
          "scale": {
            "minReplicas": "[variables('nodejsAcaSettings').instances[copyIndex()].replicas]",
            "maxReplicas": "[variables('nodejsAcaSettings').instances[copyIndex()].replicas]"
          },
          "volumes": []
        }
      }
    },
    {
      "copy": {
        "name": "nodejsAcaSaiAppConfigRoles",
        "count": "[length(variables('nodejsAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)), 'appConfig')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "nodejsAcaSaiKeyVaultRoles",
        "count": "[length(variables('nodejsAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)), 'keyVault')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['Key Vault Secrets User'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('nodejsAcaSettings').name, variables('nodejsAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "pythonAcaInstances",
        "count": "[length(variables('pythonAcaSettings').instances)]"
      },
      "type": "Microsoft.App/containerapps",
      "apiVersion": "2023-05-02-preview",
      "name": "[format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "[resourceId('Microsoft.AppConfiguration/configurationStores', variables('appConfigSettings').name)]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "environmentId": "[resourceId('Microsoft.App/managedEnvironments', format('{0}acaenv', parameters('name')))]",
        "workloadProfileName": "Warm",
        "configuration": {
          "secrets": [],
          "activeRevisionsMode": "Single",
          "ingress": {
            "external": true,
            "targetPort": "[variables('pythonAcaSettings').instances[copyIndex()].containerPort]",
            "exposedPort": 0,
            "stickySessions": {
              "affinity": "sticky"
            },
            "transport": "Auto",
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ],
            "allowInsecure": false,
            "corsPolicy": {
              "allowedOrigins": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ],
              "maxAge": 0,
              "allowCredentials": true
            },
            "clientCertificateMode": "Ignore"
          }
        },
        "template": {
          "containers": [
            {
              "image": "[format('{0}:{1}', variables('pythonAcaSettings').instances[copyIndex()].image, variables('pythonAcaSettings').instances[copyIndex()].tag)]",
              "name": "[format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)]",
              "env": [
                {
                  "name": "foundationallm-app-configuration-uri",
                  "value": "[reference(resourceId('Microsoft.AppConfiguration/configurationStores',variables('appConfigSettings').name), '2023-03-01').endpoint]"
                }
              ],
              "resources": {
                "cpu": "[variables('pythonAcaSettings').instances[copyIndex()].resources.cpu]",
                "memory": "[variables('pythonAcaSettings').instances[copyIndex()].resources.memory]"
              },
              "probes": [],
              "volumeMounts": []
            }
          ],
          "scale": {
            "minReplicas": "[variables('pythonAcaSettings').instances[copyIndex()].replicas]",
            "maxReplicas": "[variables('pythonAcaSettings').instances[copyIndex()].replicas]"
          },
          "volumes": []
        }
      }
    },
    {
      "copy": {
        "name": "pythonAcaSaiAppConfigRoles",
        "count": "[length(variables('pythonAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.AppConfiguration/configurationStores/{0}', variables('appConfigSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)), 'appConfig')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['App Configuration Data Reader'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key))]"
      ]
    },
    {
      "copy": {
        "name": "pythonAcaSaiKeyVaultRoles",
        "count": "[length(variables('pythonAcaSettings').instances)]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('keyVaultSettings').name)]",
      "name": "[guid(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)), 'keyVault')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('roleIdMapping')['Key Vault Secrets User'])]",
        "principalId": "[reference(resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key)), '2023-05-02-preview', 'full').identity.principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/containerapps', format('{0}{1}ca', variables('pythonAcaSettings').name, variables('pythonAcaSettings').instances[copyIndex()].key))]"
      ]
    }
  ],
  "outputs": {
    "webUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', format('{0}chatuica', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn)]"
    },
    "webFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', format('{0}chatuica', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn]"
    },
    "coreApiFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', format('{0}coreca', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn]"
    },
    "managementWebUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.App/containerApps', format('{0}managementuica', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn)]"
    },
    "managementWebFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', format('{0}managementuica', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn]"
    },
    "managementApiFqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', format('{0}managementca', parameters('name'))), providers('Microsoft.App', 'containerApps').apiVersions[0]).configuration.ingress.fqdn]"
    },
    "agentfactoryAcaName": {
      "type": "string",
      "value": "[format('{0}agentfactoryca', parameters('name'))]"
    },
    "agenthubAcaName": {
      "type": "string",
      "value": "[format('{0}agenthubca', parameters('name'))]"
    },
    "coreAcaName": {
      "type": "string",
      "value": "[format('{0}coreca', parameters('name'))]"
    },
    "coreJobAcaName": {
      "type": "string",
      "value": "[format('{0}corejobca', parameters('name'))]"
    },
    "managementAcaName": {
      "type": "string",
      "value": "[format('{0}managementca', parameters('name'))]"
    },
    "datasourcehubAcaName": {
      "type": "string",
      "value": "[format('{0}datasourcehubca', parameters('name'))]"
    },
    "gatekeeperAcaName": {
      "type": "string",
      "value": "[format('{0}gatekeeperca', parameters('name'))]"
    },
    "langchainAcaName": {
      "type": "string",
      "value": "[format('{0}langchainca', parameters('name'))]"
    },
    "prompthubAcaName": {
      "type": "string",
      "value": "[format('{0}prompthubca', parameters('name'))]"
    },
    "semantickernelAcaName": {
      "type": "string",
      "value": "[format('{0}semantickernelca', parameters('name'))]"
    },
    "vectorizationAcaName": {
      "type": "string",
      "value": "[format('{0}vectorizationca', parameters('name'))]"
    },
    "vectorizationJobAcaName": {
      "type": "string",
      "value": "[format('{0}vectorizationjobca', parameters('name'))]"
    },
    "chatuiAcaName": {
      "type": "string",
      "value": "[format('{0}chatuica', parameters('name'))]"
    },
    "managementuiAcaName": {
      "type": "string",
      "value": "[format('{0}managementuica', parameters('name'))]"
    },
    "resourcePrefix": {
      "type": "string",
      "value": "[parameters('name')]"
    },
    "cosmosDbAccountName": {
      "type": "string",
      "value": "[variables('cosmosDbSettings').name]"
    }
  }
}