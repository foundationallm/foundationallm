/** Inputs **/
@description('Azure Monitor Workspace Resource Id')
param azureMonitorWorkspaceResourceId string

@description('Location for all resources')
param location string

@description('Private DNS Zones for private endpoint')
param privateDnsZones array

@description('Resource suffix for all resources')
param resourceSuffix string

@description('Subnet Id for private endpoint')
param subnetId string

@description('Tags for all resources')
param tags object

@description('Timestamp for nested deployments')
param timestamp string = utcNow()

/** Locals **/
@description('The Resource Name')
var name = replace('${serviceType}-${resourceSuffix}', '-', '')

@description('The Resource Service Type token')
var serviceType = 'amg'

/** Resources **/
resource main 'Microsoft.Dashboard/grafana@2022-10-01-preview' = {
  identity: { type: 'SystemAssigned' }
  location: location
  name: name
  sku: { name: 'Standard' }
  tags: tags

  properties: {
    apiKey: 'Disabled'
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    deterministicOutboundIP: 'Disabled'
    publicNetworkAccess: 'Enabled'
    zoneRedundancy: 'Disabled'

    grafanaConfigurations: {
      smtp: { enabled: false }
    }

    grafanaIntegrations: {
      azureMonitorWorkspaceIntegrations: [
        {
          azureMonitorWorkspaceResourceId: azureMonitorWorkspaceResourceId
        }
      ]
    }
  }
}

/** Nested Modules **/
@description('Private endpoint for the resource.')
module privateEndpoint 'utility/privateEndpoint.bicep' = [for zone in privateDnsZones: {
  name: 'pe-${main.name}-${zone.key}-${timestamp}'
  params: {
    groupId: zone.key
    location: location
    privateDnsZones: filter(privateDnsZones, item => item.key == zone.key)
    subnetId: subnetId
    tags: tags

    service: {
      id: main.id
      name: main.name
    }
  }
}]

// resource grafana_efllmdopsgd_name_EFLLMdOPS_grafana_connection 'Microsoft.Dashboard/grafana/privateEndpointConnections@2022-10-01-preview' = {
//   parent: grafana_efllmdopsgd_name_resource
//   name: 'EFLLMdOPS-grafana-connection'
//   properties: {
//     privateEndpoint: {}
//     privateLinkServiceConnectionState: {
//       status: 'Approved'
//       description: 'Auto-Approved'
//     }
//     provisioningState: 'Succeeded'
//     groupIds: [
//       'grafana'
//     ]
//   }
// }

// resource privateEndpoints_EFLLMdOPS_grafana_pe_name_resource 'Microsoft.Network/privateEndpoints@2023-05-01' = {
//   name: privateEndpoints_EFLLMdOPS_grafana_pe_name
//   location: 'eastus'
//   tags: {
//     Environment: 'DEMO'
//     Project: 'FLLM'
//     Purpose: 'DevOps'
//     Workspace: 'foundationallm-ops'
//   }
//   properties: {
//     privateLinkServiceConnections: [
//       {
//         name: 'EFLLMdOPS-grafana-connection'
//         id: '${privateEndpoints_EFLLMdOPS_grafana_pe_name_resource.id}/privateLinkServiceConnections/EFLLMdOPS-grafana-connection'
//         properties: {
//           privateLinkServiceId: grafana_efllmdopsgd_name_resource.id
//           groupIds: [
//             'grafana'
//           ]
//           privateLinkServiceConnectionState: {
//             status: 'Approved'
//             description: 'Auto-Approved'
//           }
//         }
//       }
//     ]
//     manualPrivateLinkServiceConnections: []
//     subnet: {
//       id: '${virtualNetworks_EUS_FLLM_DEMO_NET_vnet_externalid}/subnets/ops'
//     }
//     ipConfigurations: []
//     customDnsConfigs: []
//   }
// }
// resource privateEndpoints_EFLLMdOPS_grafana_pe_name_grafana 'Microsoft.Network/privateEndpoints/privateDnsZoneGroups@2023-05-01' = {
//   name: '${privateEndpoints_EFLLMdOPS_grafana_pe_name}/grafana'
//   properties: {
//     privateDnsZoneConfigs: [
//       {
//         name: 'privatelink.grafana.azure.com'
//         properties: {
//           privateDnsZoneId: privateDnsZones_privatelink_grafana_azure_com_externalid
//         }
//       }
//     ]
//   }
//   dependsOn: [
//     privateEndpoints_EFLLMdOPS_grafana_pe_name_resource
//   ]
// }
