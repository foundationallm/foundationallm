name: Build Base Images

on:
  workflow_dispatch:
    inputs: {}

jobs:
  generate_matrix:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.set-registry.outputs.result }}
      base_images: ${{ steps.set-base-images.outputs.result }}
      docker_tag: ${{ steps.docker-tag.outputs.docker_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Base Images
      uses: actions/github-script@v7
      id: set-base-images
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          const jsonString = fs.readFileSync('./tests/config/e2e-test-manifest.json')
          var data = JSON.parse(jsonString)
          return JSON.stringify(data.base_images)
    
    - name: Set Container registry
      uses: actions/github-script@v7
      id: set-registry
      with:
        result-encoding: string
        script: |
          const fs = require('fs')
          const jsonString = fs.readFileSync('./tests/config/sandbox-registry.json')
          var data = JSON.parse(jsonString)
          return data.registry

    - name: Set Docker tag
      id: docker-tag
      run: |
        if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
          DOCKER_TAG="${GITHUB_REF_NAME}"
        else
          DOCKER_TAG="${GITHUB_REF_NAME#release/}"
        fi
        echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV
        echo "docker_tag: Latest Tag is : $DOCKER_TAG"
        echo "docker_tag=$DOCKER_TAG" >> $GITHUB_OUTPUT      

  base_docker_build:
    name: Build Base Docker Images
    if: (github.ref_type == 'tag' && contains(github.ref_name, '-base'))
    needs: generate_matrix
    strategy:
      fail-fast: false
      matrix:
        object: ${{ fromJson(needs.generate_matrix.outputs.base_images) }}
    uses: ./.github/workflows/build-docker-image.yml
    with:
      image: ${{ matrix.object.name }}
      context: ${{ matrix.object.context }}
      dockerfile: ${{ matrix.object.dockerfile }}
      registry: ${{ needs.generate_matrix.outputs.registry }}
      tag: ${{ needs.generate_matrix.outputs.docker_tag }}
      username: foundationallm
      target: sandbox
    secrets: inherit


