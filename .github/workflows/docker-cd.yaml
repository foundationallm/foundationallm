name: Docker Image Release


on:
  workflow_dispatch: 
    inputs: {}
  pull_request:
    types: [synchronize, opened, reopened, labeled, unlabeled, closed]
    branches: [main, release]

env:
  REGISTRY: ghcr.io
  ORG: solliancenet

jobs:
  prerelease:
    if: ${{ github.event.pull_request.merged == false && github.event.pull_request.base.ref == 'main' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Fetching the Latest Release Tag number
      id: releaseVersion
      run: |
        release_json=$(curl https://api.github.com/repos/${{ github.repository }}/releases)
        release_tag=$(echo "$release_json" | jq -r '.[0].tag_name')
        echo "release_tag: Latest Tag is : $release_tag"
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Bumping Prerelease Index
      id: bump_version_pre
      uses: cookbenjamin/update-version@v1.0.1
      with:
        current-version: ${{ steps.releaseVersion.outputs.release_tag && '0.1.0' || steps.releaseVersion.outputs.release_tag }}
        increment-version-fragment: NONE
        prerelease-fragment: ALPHA

    - name: Create Prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.bump_version_pre.outputs.updated-version }}
        release_name: Release ${{ steps.bump_version_pre.outputs.updated-version }}
        body: |
          ${{ github.event.pull_request.title }}
        draft: false
        prerelease: true

  prerelease_build:
    needs: prerelease
    strategy:
      matrix:
        include:
        - name: agent-factory-api
          context: ./src
          dockerfile: ./src/dotnet/AgentFactoryAPI/Dockerfile
        - name: agent-hub-api
          context: ./src/python
          dockerfile: ./src/python/AgentHubAPI/Dockerfile
        - name: chat-ui
          context: ./src/ui/UserPortal
          dockerfile: ./src/ui/UserPortal/Dockerfile
        - name: core-api
          context: ./src
          dockerfile: ./src/dotnet/CoreAPI/Dockerfile
        - name: core-job
          context: ./src
          dockerfile: ./src/dotnet/CoreWorker/Dockerfile
        - name: data-source-hub-api
          context: ./src/python
          dockerfile: ./src/python/DataSourceHubAPI/Dockerfile
        - name: gatekeeper-api
          context: ./src
          dockerfile: ./src/dotnet/GatekeeperAPI/Dockerfile
        - name: langchain-api
          context: ./src/python
          dockerfile: ./src/python/LangChainAPI/Dockerfile
        - name: prompt-hub-api
          context: ./src/python
          dockerfile: ./src/python/PromptHubAPI/Dockerfile
        - name: semantic-kernel-api
          context: ./src
          dockerfile: ./src/dotnet/SemanticKernelAPI/Dockerfile
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Fetching the Latest Release Tag number
      id: releaseVersion
      run: |
        release_json=$(curl https://api.github.com/repos/${{ github.repository }}/releases)
        release_tag=$(echo "$release_json" | jq -r '.[0].tag_name')
        echo "release_tag: Latest Tag is : $release_tag"
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ matrix.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,prerelease
          type=semver,pattern={{version}},value=${{ steps.releaseVersion.outputs.release_tag }}
          type=sha

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

  release:
    if: ${{ github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Fetching the Latest Release Tag number
      id: releaseVersion
      run: |
        release_json=$(curl https://api.github.com/repos/${{ github.repository }}/releases)
        release_tag=$(echo "$release_json" | jq -r '.[0].tag_name')
        echo "release_tag: Latest Tag is : $release_tag"
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Bumping Release Index
      id: bump_version_pre
      uses: cookbenjamin/update-version@v1.0.1
      with:
        current-version: ${{ steps.releaseVersion.outputs.release_tag && '0.1.0' || steps.releaseVersion.outputs.release_tag }}
        increment-version-fragment: ${{ contains(github.event.*.labels.*.name, 'major-version-update') && 'MAJOR' || 'MINOR' }}
        prerelease-fragment: REMOVE

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/create-release@v1
      with:
        tag_name: ${{ steps.bump_version.outputs.updated-version }}
        release_name: Release ${{ steps.bump_version.outputs.updated-version }}
        body: |
          ${{ github.event.pull_request.title }}
        draft: false
        prerelease: false

  release_build:
    needs: release
    strategy:
      matrix:
        include:
        - name: agent-factory-api
          context: ./src
          dockerfile: ./src/dotnet/AgentFactoryAPI/Dockerfile
        - name: agent-hub-api
          context: ./src/python
          dockerfile: ./src/python/AgentHubAPI/Dockerfile
        - name: chat-ui
          context: ./src/ui/UserPortal
          dockerfile: ./src/ui/UserPortal/Dockerfile
        - name: core-api
          context: ./src
          dockerfile: ./src/dotnet/CoreAPI/Dockerfile
        - name: core-job
          context: ./src
          dockerfile: ./src/dotnet/CoreWorker/Dockerfile
        - name: data-source-hub-api
          context: ./src/python
          dockerfile: ./src/python/DataSourceHubAPI/Dockerfile
        - name: gatekeeper-api
          context: ./src
          dockerfile: ./src/dotnet/GatekeeperAPI/Dockerfile
        - name: langchain-api
          context: ./src/python
          dockerfile: ./src/python/LangChainAPI/Dockerfile
        - name: prompt-hub-api
          context: ./src/python
          dockerfile: ./src/python/PromptHubAPI/Dockerfile
        - name: semantic-kernel-api
          context: ./src
          dockerfile: ./src/dotnet/SemanticKernelAPI/Dockerfile
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Fetching the Latest Release Tag number
      id: releaseVersion
      run: |
        release_json=$(curl https://api.github.com/repos/${{ github.repository }}/releases)
        release_tag=$(echo "$release_json" | jq -r '.[0].tag_name')
        echo "release_tag: Latest Tag is : $release_tag"
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.ORG }}/${{ matrix.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,latest
          type=raw,release
          type=semver,{{version}},value=${{ steps.releaseVersion.outputs.release_tag }}
          type=semver,{{major}}.{{minor}},value=${{ steps.releaseVersion.outputs.release_tag }}
          type=sha

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

