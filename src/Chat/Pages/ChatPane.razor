@using Humanizer
@using global::FoundationaLLM.Chat.Constants;
@using global::FoundationaLLM.Chat.Helpers;
@using global::FoundationaLLM.Core.Constants;
@using global::FoundationaLLM.Core.Models.Chat;
@inject IChatManager chatManager
@inject IJSRuntime JSRuntime

<div class="h-100 mh-100 d-flex flex-column overflow-hidden justify-content-start">
    @if (ShowHeader)
    {
        <div class="navbar navbar-dark" style="background-color: black">
            <div class="w-100 navbar navbar-dark d-flex flex-row px-4 justify-content-between flex-nowrap" style="background-color: black">
                <div class="d-flex flex-row justify-content-start">
                    <div class="flex-fill">
                        <img src="customer-logo.png" style="max-width: 150px;" />
                    </div>
                    <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                        <i class="bi bi-arrow-right-square-fill"></i>
                    </button>
                </div>                
            </div>
        </div>
    }
    <h6 class="px-4 display-6 text-secondary p-2">@GetChatSessionName()</h6>
    <div class="px-4 pb-4 pt-2 flex-grow-1 overflow-y-auto overflow-x-hidden align-items-stretch" id="MessagesInChatdiv">
        @if (CurrentSession is null)
        {
            <div class="alert alert-primary">
                <div class="alert-heading">
                    <div class="spinner-border text-primary me-1" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </div>
                <p class="text-nowrap mb-0 fst-italic">
                    Please wait while your session loads.
                </p>
            </div>
        }
        else if (CurrentSession.SessionId == Interface.EMPTY_SESSION)
        {
            <div class="alert alert-warning">
                <h4 class="alert-heading">
                    <i class="bi bi-exclamation-triangle-fill me-1" aria-hidden="true"></i>
                    No Cosmic Works AI Retail Assistant Chats Available
                </h4>
                <p class="text-nowrap mb-0 fst-italic">
                    Use the New Chat option to talk to the Cosmic Works AI Retail Assistant.
                </p>
            </div>
        }
        else
        {
            if (_messagesInChat is null || _loadingComplete == false)
            {
                <div class="alert alert-primary">
                    <div class="alert-heading">
                        <div class="spinner-border text-primary me-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading...
                    </div>
                    <p class="text-nowrap mb-0 fst-italic">
                        Please wait while your session loads.
                    </p>
                </div>
            }
            else
            {
                if (_messagesInChat.Count == 0)
                {
                    <div class="alert alert-success">
                        <h4 class="alert-heading">
                            <i class="bi bi-lightbulb-fill me-1" aria-hidden="true"></i>
                            Get Started
                        </h4>
                        <p class="text-nowrap mb-0 fst-italic">
                            How can I help?
                        </p>
                    </div>
                }
                else
                {
                    <div class="toast-container position-static w-100 d-flex flex-column align-items-stretch">
                        @foreach (var msg in _messagesInChat)
                        {
                            <div class="toast fade show w-75 rounded-3 @(msg.Sender == nameof(Participants.Assistant) ? "align-self-end" : "align-self-start")">
                                <div class="toast-header @(msg.Sender == nameof(Participants.Assistant) ? "bg-success text-dark" : "bg-dark text-light")">
                                    <i class="bi @(msg.Sender == nameof(Participants.Assistant) ? "bi-robot" : "bi-person") me-1" aria-hidden="true"></i>
                                    <strong class="me-auto text-capitalize">
                                        @msg.Sender
                                    </strong>
                                    @if (msg.Tokens is not null)
                                    {
                                        <span class="me-2 badge rounded-pill bg-light">
                                            Tokens: @msg.Tokens
                                        </span>
                                    }
                                    <small>
                                        @msg.TimeStamp.Humanize()
                                    </small>
                                </div>
                                <div class="toast-body">
                                    <i class="bi bi-grip-vertical mr-2 text-black-50"></i>
                                    @{
                                        MarkupString html = new MarkupString(msg.Text.Replace("\n", "<br />"));
                                    }
                                    @html
                                </div>
                                @if (msg.Sender == nameof(Participants.Assistant))
                                {
                                    <div class="rating-buttons mt-2">
                                        @if (msg.Rating is null)
                                        {
                                            <button class="btn btn-link text-success" @onclick="() => RateMessage(msg.Id, true)">
                                                <i class="bi bi-hand-thumbs-up"></i> Like
                                            </button>
                                            <button class="btn btn-link text-danger" @onclick="() => RateMessage(msg.Id, false)">
                                                <i class="bi bi-hand-thumbs-down"></i> Dislike
                                            </button>
                                        }
                                        else
                                        {
                                            <div class="undo-container">
                                                <span class="badge rounded-pill @(msg.Rating.Value ? "bg-success" : "bg-danger")">
                                                    @(msg.Rating.Value ? "Liked" : "Disliked")
                                                </span>
                                                <button class="btn btn-link text-secondary" @onclick="() => UndoRating(msg.Id)" data-bs-toggle="tooltip" data-bs-placement="top" title="Undo Rating">
                                                    <i class="bi bi-x-circle"></i>
                                                </button>
                                            </div>
                                        }
                                        @if (msg.CompletionPromptId is not null)
                                        {
                                            <button class="btn btn-link text-success" @onclick="() => DisplayCompletionPrompt(msg.Id)">
                                                <i class="bi bi-chat-square-text"></i> View Prompt
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            }
        }
    </div>
    <div class="bg-dark text-light px-4 py-2 rounded-top-5 text-dark d-flex flex-column justify-content-center">
        @if (CurrentSession?.SessionId != Interface.EMPTY_SESSION)
        {
            <form @onsubmit="SubmitPromptAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="bi bi-body-text input-group-text" aria-hidden="true"></i>
                    <input class="form-control form-control-sm" type="text" @bind="@UserPromptSet" @oninput="@((e) => { UserPrompt=e.Value?.ToString();})" rows="1" placeholder="What would you like to ask?"></input>
                    <button type="button" class="bg-light btn btn-outline-secondary" @onclick="SubmitPromptAsync">
                        <i class="bi bi-send-fill" aria-hidden="true"></i>
                    </button>
                </div>
            </form>
        }
    </div>
</div>

@if (_completionPromptPopUpOpen)
{
    <Confirmation Caption="Completion Prompt"
                  Message="@_completionPromptContent"
                  OnClose="@OnConfirmationClose"
                  Type="Confirmation.Category.Okay">
    </Confirmation>
}

@code {

    [Parameter]
    public EventCallback<string> OnChatUpdated { get; set; }

    [Parameter]
    public Session? CurrentSession { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; }

    [Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    private string? UserPrompt { get; set; }

    private string? UserPromptSet { get; set; }

    private List<Message>? _messagesInChat;
    private static event EventHandler<Session>? _onMessagePosted;
    private bool _loadingComplete;

    private bool _completionPromptPopUpOpen = false;
    private string _completionPromptContent = string.Empty;

    private async Task OnConfirmationClose(bool isOk)
    {
        _completionPromptPopUpOpen = false;
        _completionPromptContent = string.Empty;
    }

    private async Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    public async Task ReloadChatMessagesAsync()
    {
        if (CurrentSession is not null)
        {
            _messagesInChat = await chatManager.GetChatSessionMessagesAsync(CurrentSession.SessionId);
        }
    }

    protected override void OnInitialized()
    {
        _onMessagePosted += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                if (e.SessionId == CurrentSession?.SessionId)
                {
                    await this.ReloadChatMessagesAsync();
                    this.StateHasChanged();
                }
            });
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentSession is null)
        {
            return;
        }

        if (CurrentSession.SessionId != Interface.EMPTY_SESSION & CurrentSession.SessionId is not null)
        {
            _messagesInChat = await chatManager.GetChatSessionMessagesAsync(CurrentSession?.SessionId);
        }

        _loadingComplete = true;
    }

    private async Task RateMessage(string messageId, bool rating)
    {
        var message = _messagesInChat?.FirstOrDefault(m => m.Id == messageId);
        if (message != null)
        {
            await chatManager.RateMessageAsync(message.Id, message.SessionId, rating);
            message.Rating = rating;
        }
    }

    private async Task UndoRating(string messageId)
    {
        var message = _messagesInChat?.FirstOrDefault(m => m.Id == messageId);
        if (message != null)
        {
            await chatManager.RateMessageAsync(message.Id, message.SessionId, null);
            message.Rating = null;
        }
    }

    private async Task DisplayCompletionPrompt(string messageId)
    {
        var message = _messagesInChat?.FirstOrDefault(m => m.Id == messageId);
        if (message != null)
        {
            var completionPrompt = await chatManager.GetCompletionPrompt(message.SessionId, message.CompletionPromptId);
            _completionPromptContent = completionPrompt.Prompt;
            _completionPromptPopUpOpen = true;
        }
    }

    public void ChangeCurrentChatSession(Session session)
    {
        CurrentSession = session;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SubmitPromptAsync();
        }
    }

    private async Task SubmitPromptAsync()
    {
        if (CurrentSession?.SessionId == Interface.EMPTY_SESSION || string.IsNullOrWhiteSpace(UserPrompt))
        {
            return;
        }

        if (UserPrompt != string.Empty)
        {
            UserPromptSet = string.Empty;
        }

        await chatManager.GetChatCompletionAsync(CurrentSession?.SessionId, UserPrompt);
        UserPrompt = string.Empty;

        if (_messagesInChat?.Count == 2)
        {
            string newSessionName;
            newSessionName = await chatManager.SummarizeChatSessionNameAsync(CurrentSession?.SessionId, string.Join(Environment.NewLine, _messagesInChat.Select(m => m.Text)));

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newSessionName;
            }
        }
        await OnChatUpdated.InvokeAsync();

        if (_onMessagePosted is not null && CurrentSession is not null)
        {
            _onMessagePosted.Invoke(null, CurrentSession);
        }

        await ScrollLastChatToView();
    }

    private string GetChatSessionName() => CurrentSession switch
    {
        null => string.Empty,
        (Session s) when s.SessionId == Interface.EMPTY_SESSION => string.Empty,
        _ => CurrentSession.Name
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollLastChatToView();
    }

    /// <remarks>
    /// This is a hack to get the scroll to work.  Need to find a better way to do this.
    /// </remarks>
    private async Task ScrollLastChatToView()
    {
        await JSRuntime.InvokeAsync<bool>("scrollToLastMessage");
    }
}