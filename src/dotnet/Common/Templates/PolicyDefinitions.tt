<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ assembly name="System.Text.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Memory" #>
<#@ import namespace="System.Text.Json" #>
<#@ import namespace="System.Text.Json.Nodes" #>
<#@ output extension=".cs" #>
<#
    string inputFileName = this.Host.ResolvePath($"../Constants/Data/PolicyDefinitions.json");
    string inputContent = File.ReadAllText(inputFileName);
    var jsonObjects = JsonNode.Parse(inputContent)!;
#>
using System.Collections.ObjectModel;

namespace FoundationaLLM.Common.Models.Authorization
{
    /// <summary>
    /// Represents all policy definitions used in PBAC.
    /// </summary>
    public static class PolicyDefinitions
    {
        public static readonly ReadOnlyDictionary<string, PolicyDefinition> All = new (
            new Dictionary<string, PolicyDefinition>()
            {
<#
    foreach (var jsonObject in jsonObjects.AsArray())
    {
#>
                {
                    "<#= jsonObject["object_id"] #>",
                    new PolicyDefinition
                    {
                        Name = "<#= jsonObject["name"] #>",
                        Type = "<#= jsonObject["type"] #>",
                        ObjectId = "<#= jsonObject["object_id"] #>",
                        DisplayName = "<#= jsonObject["display_name"] #>",
                        Description = "<#= jsonObject["description"] #>",
                        AssignableScopes = [<# foreach (var scope in jsonObject["assignable_scopes"].AsArray()) { #>

                            "<#= scope #>",<# } #>],
                        MatchingStrategy = new PolicyMatchingStrategy
                        {
                            UserIdentityProperties = [
                                "<#= jsonObject["matching_strategy"]["user_identity_properties"][0] #>"<# foreach (var prop in jsonObject["matching_strategy"]["user_identity_properties"].AsArray().Skip(1)) { #>,
                                "<#= prop #>" <# } #>

                            ]
                        },
                        CreatedOn = DateTimeOffset.Parse("<#= jsonObject["created_on"] #>"),
                        UpdatedOn = DateTimeOffset.Parse("<#= jsonObject["updated_on"] #>"),
                        CreatedBy = <#= jsonObject["created_by"] == null ? "null" : $"\"{jsonObject["created_by"]}\"" #>,
                        UpdatedBy = <#= jsonObject["updated_by"] == null ? "null" : $"\"{jsonObject["updated_by"]}\"" #>
                    }
                },
<#
    }
#>
            });
    }
}
