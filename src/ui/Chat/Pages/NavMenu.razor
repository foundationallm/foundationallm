@using global::FoundationaLLM.Chat.Constants;
@using global::FoundationaLLM.Chat.Helpers;
@using FoundationaLLM.Chat.Components
@using global::FoundationaLLM.Common.Models.Chat;
@inject IChatManager chatManager
@inject IBrandingService BrandingService
@inject IJSRuntime JSRuntime

<div class="h-100 d-flex flex-column chat-sidebar" style="min-width: 309px;">
    <div class="flex-column navbar">
        <div class="container-fluid justify-content-between">
            <div class="flex-fill">
                <img src="@BrandingService.CurrentConfig?.LogoUrl" alt="@BrandingService.CurrentConfig?.CompanyName" style="max-width: 150px;" />
            </div>
            <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                <i class="bi bi-arrow-left-square-fill"></i>
            </button>
        </div>
    </div>

    @if (_loadingComplete == true)
    {
        <div class="chat nav-item py-2 d-grid">
            <NavLink style="cursor:pointer" class="btn rounded-0 btn-sm mx-1 d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                <i class="bi bi-plus"></i>
                <span class="flex-fill">
                    <strong>Create New Chat</strong>
                </span>
            </NavLink>
        </div>
    }
    <div class="flex-grow-1 flex-column justify-content-center overflow-y-auto overflow-x-hidden" id="ChatSessionsDiv">
        @if (_loadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="row row-cols-1 g-2 px-2 d-flex flex-column align-items-start">
                        @foreach (var session in ChatSessions)
                        {
                            <div class="col">
                                <div class="chat card rounded-0 @(IsActiveSession(session.SessionId) ? "chat--selected" : "")" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                    <div class="card-body d-flex justify-content-between align-items-start">
                                        <a class="card-title text-decoration-none h6" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                            @if (IsActiveSession(session.SessionId))
                                            {
                                                <i class="bi bi-chat-right-dots-fill me-2"></i>
                                            }
                                            <span title="@session.Name" class="ms-1">
                                                @SafeSubstring(session.Name,20)
                                            </span>
                                        </a>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenInput(session.SessionId,session.Name))">
                                                <i class="bi bi-pencil-fill me-1"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenConfirmation(session.SessionId,session.Name))">
                                                <i class="bi bi-trash-fill ms-1"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </nav>
            </div>
        }
    </div>
</div>

<style type="text/css">
    .chat-sidebar {
        background-color: var(--primary-color);
    }
    .chat {
        background: none;
        color: var(--primary-text);
    }
    .chat a {
        color: var(--primary-text);
    }
    .chat--selected {
        color: var(--secondary-text);
        background-color: var(--secondary-color);
        border-left: 4px solid rgba(217, 217, 217, 0.5);
    }
    .chat:hover, .chat a:hover {
        background-color: rgba(217, 217, 217, 0.05);
        color: var(--primary-text);
    }
    .chat-sidebar .bi.bi-arrow-left-square-fill {
        color: var(--primary-text);
    }
</style>

@if (_deletePopUpOpen)
{
    <Confirmation Caption="Delete a Chat"
              Message="@_popUpText"
              OnClose="@OnConfirmationClose"
              Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}


@if (_renamePopUpOpen)
{
    <Input Caption="Rename a Chat"
       Value="@_popUpText"
       OnClose="@OnInputClose">
    </Input>
}


@code {

    [Parameter]
    public EventCallback<Session> OnChatClicked { get; set; } = default!;

    [Parameter]
    public static List<Session> ChatSessions { get; set; } = new();

    [Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    [Parameter]
    public EventCallback OnThemeUpdated { get; set; }

    private string? _sessionId;
    private string? _popUpText;
    private bool _deletePopUpOpen = false;
    private bool _loadingComplete;
    private bool _renamePopUpOpen = false;

    public Session? CurrentSession;

    private static event EventHandler<string>? OnNavMenuChanged;

    async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    async private Task ChangeTheme()
    {
        await OnThemeUpdated.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        OnNavMenuChanged = async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                this.StateHasChanged();
                await LoadCurrentChatAsync();
            });
        };
    }

    private void OpenConfirmation(string id, string title)
    {
        _deletePopUpOpen = true;
        _sessionId = id;
        _popUpText = $"Do you want to delete the chat \"{title}\"?";
    }

    public void UpdateNavMenuDisplay(string reason = "")
    {
        if (OnNavMenuChanged is not null)
        {
            OnNavMenuChanged.Invoke(null, reason);
        }
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        var updateCurrentChat = CurrentSession is not null & _sessionId == CurrentSession?.SessionId;

        if (isOk)
        {
            _deletePopUpOpen = false;
            if (_sessionId != null) await chatManager.DeleteChatSessionAsync(_sessionId);

            _deletePopUpOpen = false;

            UpdateNavMenuDisplay("Delete");

            if (!updateCurrentChat)
                return;

            CurrentSession = new Session
            {
                SessionId = Interface.EMPTY_SESSION,
                Name = string.Empty
            };

            if (ChatSessions.Count > 0)
            {
                var match = ChatSessions.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }

            await LoadCurrentChatAsync();
        }

        _deletePopUpOpen = false;
    }

    private void OpenInput(string id, string title)
    {
        _renamePopUpOpen = true;
        _sessionId = id;
        _popUpText = title;
    }

    private async Task OnInputClose(string newName)
    {
        if (!string.IsNullOrWhiteSpace(newName))
        {
            var updateCurrentChat = _sessionId == CurrentSession?.SessionId;

            if (_sessionId != null) await chatManager.RenameChatSessionAsync(_sessionId, newName);

            _renamePopUpOpen = false;

            UpdateNavMenuDisplay("Rename");

            if (!updateCurrentChat)
            {
                return;
            }

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newName;
            }
            await LoadCurrentChatAsync();
        }

        _renamePopUpOpen = false;
    }

    private async Task NewChat()
    {
        await chatManager.CreateNewChatSessionAsync();

        if (CurrentSession is not null && ChatSessions is not null && ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.LastOrDefault();
            if (match is not null)
            {
                CurrentSession.SessionId = match.SessionId;
                CurrentSession.Name = match.Name;
                CurrentSession.TokensUsed = match.TokensUsed;
            }
        }

        await LoadCurrentChatAsync();
        await JSRuntime.InvokeAsync<bool>("scrollToLastEntry", "ChatSessionsDiv");

        UpdateNavMenuDisplay("Add");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_loadingComplete == true)
            return;

        _loadingComplete = false;

        ChatSessions = await chatManager.GetAllChatSessionsAsync();
        if (CurrentSession is not null && ChatSessions is not null & ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.FirstOrDefault();
            if (match is not null)
            {
                CurrentSession.SessionId = match.SessionId;
                CurrentSession.Name = match.Name;
                CurrentSession.TokensUsed = match.TokensUsed;
            }
        }

        _loadingComplete = true;

        if (BrandingService.CurrentConfig is {KioskMode: true })
        {
            await NewChat();
            await LoadCurrentChatAsync();
            await ToggleNavMenu();
        }
        else
        {
            await LoadCurrentChatAsync();
        }

    }

    private async Task<int> LoadCurrentChatAsync()
    {
        var index = 0;
        if (CurrentSession is not null & ChatSessions?.Count > 0)
        {
            index = ChatSessions?.FindIndex(s => s.SessionId == CurrentSession?.SessionId) ?? 0;
        }
        if (CurrentSession is null || index < 0)
        {
            CurrentSession = new Session
            {
                SessionId = Interface.EMPTY_SESSION,
                Name = string.Empty
            };

            if (ChatSessions is {Count: > 0 })
            {
                var match = ChatSessions.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }

    private async Task<int> LoadChat(string _sessionId, string sessionName, int? tokensUsed)
    {
        if (ChatSessions is null) return 0;

        if (CurrentSession is null)
            CurrentSession = new Session();

        CurrentSession.SessionId = _sessionId;
        CurrentSession.Name = sessionName;
        CurrentSession.TokensUsed = tokensUsed;

        await LoadCurrentChatAsync();

        return 0;
    }

    private bool IsActiveSession(string _sessionId) => CurrentSession switch
    {
        null => true,
        ({ } s) when s.SessionId == _sessionId => true,
        _ => false
    };

    public string SafeSubstring(string text, int maxLength) => text switch
    {
        null => string.Empty,
        _ => text.Length > maxLength ? text[..maxLength] + "..." : text
    };
}